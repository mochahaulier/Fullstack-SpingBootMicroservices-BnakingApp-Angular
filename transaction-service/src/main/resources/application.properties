spring.application.name=transaction-service

# Hibernate properties
# spring.jpa.hibernate.ddl-auto=create-drop 
spring.jpa.hibernate.ddl-auto=update

# swagger-ui custom path
springdoc.swagger-ui.path=/swagger-ui.html
# /api-docs endpoint custom path
springdoc.api-docs.path=/api-docs

# from render.com
spring.datasource.url = jdbc:postgresql://${env.POSTGRESQL_CLUSTER}/${env.POSTGRESQL_DATABASE}
spring.datasource.username=${env.POSTGRESQL_USER}
spring.datasource.password=${env.POSTGRESQL_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# For Spring Boot to use EhCache
spring.cache.jcache.config=classpath:ehcache.xml

server.port = 8086

eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka

# Kafka settings
spring.kafka.bootstrap-servers=kafka-1:19092,kafka-2:19092,kafka-3:19092
spring.kafka.template.default-topic=accountCreateTopic
spring.kafka.consumer.group-id=transaction-service
spring.kafka.consumer.auto-offset-reset=earliest

# Use ErrorHandlingDeserializer for both key and value deserializers
# spring.kafka.consumer.key-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
# spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer

# Delegate deserializers for ErrorHandlingDeserializer
# spring.kafka.consumer.properties.spring.deserializer.key.delegate.class=org.apache.kafka.common.serialization.StringDeserializer
# # spring.kafka.consumer.properties.spring.deserializer.value.delegate.class=org.springframework.kafka.support.serializer.JsonDeserializer
# spring.kafka.consumer.properties.spring.deserializer.value.delegate.class=io.confluent.kafka.serializers.KafkaAvroDeserializer
spring.kafka.consumer.properties.schema.registry.url=http://schema-registry:8081
spring.kafka.consumer.properties.specific.avro.reader=true

spring.devtools.restart.enabled=false

# # JsonDeserializer settings
# spring.kafka.consumer.properties.spring.json.trusted.packages=dev.mochahaulier.transactionservice.event
# spring.kafka.consumer.properties.spring.json.type.mapping=event:dev.mochahaulier.transactionservice.event.ClientProductCreatedEvent

# logging.level.org.springframework.kafka=DEBUG
# logging.level.org.apache.kafka=DEBUG
# logging.level.dev.mochahaulier.transactionservice=DEBUG

# logging.level.org.springframework.kafka=DEBUG
# logging.level.org.apache.kafka=DEBUG

# Endpoint for Actuator Prometheus
# management.endpoints.web.exposure.include=prometheus,trace,metrics,health
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]

management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
management.endpoint.prometheus.enabled=true
management.prometheus.metrics.export.enabled=true
management.zipkin.tracing.endpoint=http://tempo:9411
management.tracing.sampling.probability=1.0
management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.observations.key-values.application=transaction-service

# Loki URL
loki.url=http://loki:3100/loki/api/v1/push

clientproduct.service.url=http://clientproduct-service